//********************************************************************************************
//*
//*    This file is part of the opengl extensions library. This library is
//*    distributed with Egoboo.
//*
//*    Egoboo is free software: you can redistribute it and/or modify it
//*    under the terms of the GNU General Public License as published by
//*    the Free Software Foundation, either version 3 of the License, or
//*    (at your option) any later version.
//*
//*    Egoboo is distributed in the hope that it will be useful, but
//*    WITHOUT ANY WARRANTY; without even the implied warranty of
//*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//*    General Public License for more details.
//*
//*    You should have received a copy of the GNU General Public License
//*    along with Egoboo.  If not, see <http://www.gnu.org/licenses/>.
//*
//********************************************************************************************

/// @defgroup _ogl_extensions_ Extensions to OpenGL

/// @file egolib/Extensions/ogl_debug.h
/// @ingroup _ogl_extensions_
/// @brief Definitions for the debugging extensions for OpenGL
/// @details

#pragma once

#include "egolib/Extensions/ogl_include.h"

#undef USE_GL_DEBUG

//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------

/// An encapsulation of the OpenGL texture gen state.
struct gl_texture_gen_t
{
    GLboolean enabled;
    GLfloat   eye_plane[4];
    GLfloat   object_plane[4];
    GLint     mode[1];
};

/// Grab the OpenGL texture gen state.
void gl_grab_texture_gen_state(gl_texture_gen_t *self, GLenum coord);

/// An encapsulation of the OpenGL texture state.
struct gl_texture_t
{
    GLenum  target;
    GLuint  binding;              /*< The OpenGL texture number */

    GLfloat width;
    GLfloat height;
    GLint   border;
    GLint   internal_format;
    GLint   red_size;
    GLint   green_size;
    GLint   blue_size;
    GLint   alpha_size;
    GLint   luminance_size;
    GLint   intensity_size;
    GLfloat border_color[4];

    GLint   min_filter;
    GLint   mag_filter;
    GLint   wrap_s;
    GLint   wrap_t;
    GLfloat priority;
    GLint   resident;

    gl_texture_gen_t gen[4];
};

/// Grab the OpenGL texture state.
void gl_grab_texture_state(gl_texture_t *self, GLenum target, GLint level);

/// An encapsulation of the OpenGL texturing state.
struct gl_texturing_t
{
    GLboolean        texture_1d_enabled;
    gl_texture_t     texture_1d;

    GLboolean        texture_2d_enabled;
    gl_texture_t     texture_2d;

    GLint            env_mode[1];
    GLfloat          env_color[4];

    gl_texture_gen_t texture_gen[4];
};

/// Grab the OpenGL texturing state.
void gl_grab_texturing_state(gl_texturing_t *self);

//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------

    extern const char * next_cmd;
    extern int          next_line;
    extern const char * next_file;

/// grab a text representation of an OpenGL error
    void handle_gl_error();

/// print out the text representation of an OpenGL error generated by handle_gl_error()
    void print_gl_command();

#if defined(USE_GL_DEBUG)

/// a wrapper function for automatically debugging OpenGL function calls
/// Usage: GL_DEBUG( gl* )( param1, param2, ... )
/// @warning Wrapping glEnd() in this manner will generat a multitude of odd errors.
#    define GL_DEBUG(XX) \
    (handle_gl_error(), \
     next_cmd = #XX, \
     next_line = __LINE__, \
     next_file = __FILE__, \
     XX)

/// a special wrapper function that is the replacement for "GL_DEBUG( glEnd )()"
/// this avoids the errors mentioned with the definition of GL_DEBUG()
#    define GL_DEBUG_END() \
    handle_gl_error( void ); \
    next_cmd = "UNKNOWN"; \
    next_line = -1; \
    next_file = "UNKNOWN"; \
    glEnd( void ); \
    glGetError();

#else

/// this macro is set to do nothing if USE_GL_DEBUG is not defined
#    define GL_DEBUG(XX)   XX

/// this macro is set to the normal glEnd() USE_GL_DEBUG is not defined
#    define GL_DEBUG_END() glEnd();

#endif
