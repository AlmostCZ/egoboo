#!/usr/bin/env perl

use strict;
use warnings;

sub outputTests ($);

my $outFile = shift;
my @testFiles = @ARGV;
my @testCases;

open my $out, ">", $outFile or die "Cannot open $outFile: $!";

print $out "#define EGOTEST_USE_HANDWRITTEN\n";

outputTests($_) for @testFiles;

print $out <<EOF;
#include "EgoTest/EgoTest_Handwritten.cpp"
std::map<std::string, std::function<int(void)>> EgoTest::getTestCases()
{
    std::map<std::string, std::function<int(void)>> ret;
EOF

for my $testCase (@testCases) {
    printf $out "    ret.insert(std::make_pair(\"%s\", &TestCase_%s));\n", $testCase, $testCase;
}

print $out <<EOF;
    return ret;
}
EOF

close $out;

sub outputTests ($) {
    my $testFile = shift;
    my $testContents;
    if (open my $in, "<", $testFile) {
        local $/; # read the entire file
        $testContents = <$in>;
        close $in;
    } else {
        warn "Cannot open $testFile: $!, ignoring";
        return;
    }
    my %testCases = $testContents =~ /EgoTest_TestCase\s*\(\s*(\w+)\s*\)(.+?)EgoTest_EndTestCase\s*\(\s*\)\s*/smg;
    unless (%testCases) {
        warn "Found no test cases in $testFile";
        return;
    }
    for my $testCase (keys %testCases) {
        print $out "#include \"$testFile\"\n";
        print $out "static int TestCase_$testCase() {\n";
        print $out "    int failures = 0;\n";
        print $out "    $testCase testCase;\n";
        print $out "    $testCase *testCasePtr = &testCase;\n";
        my @tests = $testCases{$testCase} =~ /EgoTest_Test\s*\(\s*(\w+)\s*\)/g;
        for my $test (@tests) {
            print $out "    failures += EgoTest::handleTest(\"$test\", [testCasePtr]() mutable {testCasePtr->$test();});\n";
        }
        print $out "    return failures;\n";
        print $out "}\n\n";
    }
    push @testCases, keys %testCases;
}