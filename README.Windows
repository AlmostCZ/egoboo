Guide modified and updated by Zefz ( 21.03.2008 )
Guide modified and updated by Birdsey ( 20.08.2011 )

COMPILING EGOBOO ON WINDOWS
===========================

This is a basic guide for compiling egoboo on windows computers. It assumes that the user has a basic understanding of the windows file system, and how to use an Integrated Development Environment (IDE). At this point, only Microsoft Visual Studio and Code::Blocks are supported. 

For more help and support contacct us on the offical forums at:
	http://egoboo.sourceforge.net/forum/

INTRODUCITON
============

Welcome to the latest version of the guide!

To start with, you will have to make sure you have everything on the following list:
	- a windows-compatible C compiler 
	- an egoboo source distribution (which you probably already have)
	- development libraries for each of the projects listed in DEPENDENCIES.txt

These are the minimum requirements, but if you are interested in egoboo development, I would suggest using an Integrated Development Environment (IDE) and getting source distributions for the development libraries. 

C Compiler
----------

In this guide, we assume that you have access to some version of Microsoft Visual C++ (MSVC). Though there are other good IDEs out there (Birdsey personally recommends Code::Blocks for cross platform development), MSVC is very good and free versions are available from microsoft.

Several MSVC-based project files are shipped with egoboo. You can detrmine which IDE to use with which file using the following chart:

	- egoboo_vs6.dsw = Visual Studio 6 Workspace
	- egoboo_vs7.sln = Visual Studio 2003 Solution
	- egoboo_vs8.sln = Visual Studio 2005 Solution
	- egoboo_vs9.sln = Visual Studio 2008 Solution
	- egoboo_vs10.sln = Visual Studio 2010 Solution

The MSVC IDE is pretty good at being able to upgrade previous versions of the project files, so it is probably not REALLY necessary to ship anything more than egoboo_vs6.dsw, but some new and more detailed settings are available in the newer versions and the IDE has to guess at these parameters. Birdsey doesn't like for computers to guess...

There is also support for the Code::Blocks IDE through the file

	- egoboo.workspace = Code::Blocks workspace several versions of VS

This one is set up for cross-platform development on Windows and *nix (it is possible to support compilers on Mac, but no one has bothered to work out the project configurations). Code::Blocks can also import some versions of the MSVC solutions files (.sln), and supports a host of different compilers. 

At this time (August 2011), Microsoft is offereing free versions of these compilers via the Visual Studio Express program. These are generally older versions of the compilers, which are freely available for any use, but are slightly crippled compared to the full versions. Search the microsoft download center to determine what express versions are available to you.

There are also several good free compilers that are compatible with Code::Blocks, including the Intel compiler.

- The latest version of the Windows SDK. This is often shipped with Visual Studio Express, but if not, download the latest version from microsoft.com. The latest version of the Windows SDK that has been compiled against is version 10, which is compatible with Windows Vista.

A free installer for Code::Blocks is available at www.codeblocks.org. You will still need a C/C++ compiler, and if you do not elect to use the Visual Studio Express option, there are many good and free compilers out there. For instance, Code::Blocks supports the free non-commercial Intel compiler at software.intel.com/en-us/articles/non-commercial-software-download.

Source Code
-----------

Given that you are looking at this file, it is likely you already have access to some version of the egoboo source code. If you would like to get a more recent version, you can download the source code for egoboo releases at egoboo.sourceforge.net, download unstable/development source code at sourceforge.net/projects/egoboo, or get the latest development code on the subversion (SVN) repository at https://egoboo.svn.sourceforge.net/svnroot/egoboo.

-- getting code from the subversion repository --

If you want to grab absolutely everything from the project including snapshots of previous releases, work-in-progress, related projects, etc. you can use the command line argument

	svn checkout https://egoboo.svn.sourceforge.net/svnroot/egoboo egoboo

which will get all the files and place them under a local directory called egoboo. If it didn't exist before, it will be created at the location you execute the command. The checkout command will not allow you to checkout files into the same place twice. If you have already run "svn checkout..." and you want updated files, use "svn update..." indstead.

If you want to work on the latest code, check out 

	svn checkout [SVN_URL]/branches/2.8.x egoboo/branches/2.8.x
	svn checkout [SVN_URL]/branches/install egoboo/branches/install

where [SVN_URL] stands for https://egoboo.svn.sourceforge.net/svnroot/egoboo. This will supply you with everything you need to build and run egoboo except for the library files.

Development Libraries
---------------------

To get egoboo to compile, link, and run you will need to download the development libraries listed in DEPENDENCIES.txt. Some of these are optional like the support for the Lua programming language, but the default project configuration requires all of them.

The bulk of the dependencies are related to the Simple Direct-media Layer (SDL), which what allows egoboo to run on multiple platforms. You can get the various SDL modules via the internet at the following locations:

	- SDL devel package (http://www.libsdl.org/)
	- SDL mixer devel package (http://www.libsdl.org/projects/SDL_mixer/)
	- SDL ttf devel package (http://www.libsdl.org/projects/SDL_ttf/)
	- SDL image devel package (http://www.libsdl.org/projects/SDL_image/)

As Birdsey stated above, it might be a good idea to get the source-code for these libraries. There are cases where you might run into all kinds of problems with the default libraries, for instance, a common problem is that your compiler might assume a different memory alignment than the compiler that supplied the binaries you are using. If something like this were to happen, the best way to fix it is to build your own versions of the libraries and egoboo using the same compiler and the same settings.

The source for the other dependencies can be found at the following locations:

	- Lua support >= version 5.0 (http://www.lua.org/download.html)
	- PhysicsFS   >= version 2.0 (http://icculus.org/physfs/)
	- ENet        >= version 1.2 (http://enet.bespin.org)

no binaries are available at this time and these libraries wil have to be built. Make sure that the library versions that you download fit the requirements listed above.

-- compiling/building the libraries --

If you choose to build the SDL libraries from source, they all have some project files for some version of MSVC and appropriate documentation in the README and INSTALL text files, which you can open in windows using Wordpad. The same is true for Lua and ENet.

To build PhysicsFS, you will need some version of the cross-platform build system, CMake. For windows, I suggest getting the CMake gui available at (www.cmake.org). CMake is fairly easy to use. You will have to do the following steps to generate a project file that you can use:

	- start the cmake-gui from the start menu
	- CMake will open a dialog box.
	- use "Where is the source code" text box to 
	  indicate the PhysicsFS directory, or use the
	  "..." to open the file requestor.
	- You may want to choose a different directory
	  for the "Where to build the binaries", like
	  a build subdirectory under the PhysicsFS directory
	- choose a compiler from the list CMake provides
	- you may want 
	- press the "Configure" button
	- CMake will prompt you for a compiler choose one from
	  the drop-down menu that you have, then click "Finish."
	- The a configuration will probably "fail" the 1st time
	  and some/all of the configuration variables will show
	  up as red. Try hitting "Configure" button again and
	  see if the red goes away. You can repeat that a few times.
	- If the red doesn't go away, you have a problem, and you may
	  be able to fix it by editing the text values to get
	  the correct ones for your system. If not, you are missing
	  something necessary. Go check the PhysicsFS documentation.
	- Once you have no red values, hit the "Generate" button 
	  which actually creates the correct project file. 

You will then need to open the project file in your IDE and build the project. There is a "build all" option that you may want to use. Not hard, but not easy...

-- "installing" the libraries --

Even though there is no official procedure for "installing" libraries on windows, we are going to suggest that you order them in a specific way. There is a whole section on it, even!


"INSTALLING" THE LIBRARIES
==========================

In unix/linux, there is a veru specific way that libraries need to be installed. This solves some problems and creates others, but if we adopt their format we can really make compiling egoboo A LOT easier.

The basic directory structure is given in the following diagram (use a fixed width font to view it properly):

`-- library root directory
    |
    |-- bin
    |   |
    |   |-- first_project_library.dll
    |   |-- second_project_library.dll
    |   `-- some_other_program.exe
    |   
    |-- doc
    |   |
    |   |-- some directory with documentation for project 1
    |   `-- some directory with documentation for project 2
    |
    |
    |-- include
    |   |
    |   |-- first project directory
    |   |   |
    |   |   |-- some_include_file_0.h
    |   |   |-- some_include_file_1.h
    |   |   `-- some_include_file_2.h
    |   |
    |   |-- second project directory
    |   |   |
    |   |   |-- some_include_file_0.h
    |   |   |-- some_include_file_1.h
    |   |   `-- some_include_file_2.h
    |   |
    |   |-- some_random_include_file_0.h
    |   |-- some_random_include_file_1.h
    |   |-- some_random_include_file_2.h
    |   `-- some_random_include_file_3.h
    |   
    `-- lib
        |
        |-- first_project_library.lib
        `-- second_project_library.lib
       
This is the file structure that the egoboo project files support. Advanced developers are invited to edit their project files and use whatever scheme they like. Both Birdsey and Zefz developed other ways of dealing with the dependent libraries, but it made compiling too hard for everyone else...

-- creating the directory structure --

To get your libraries in this structure, create a directory that will house them. If you are the sole user of your computer, I suggest making it in the root directory of your computer, so the filename will be shorter:

	-  %HOMEDRIVE%\libraries

Other possible locations are 

	- %COMMONPROGRAMFILES%\libraries
	- %PROGRAMDATA%\libraries
	- %APPDATA%\libraries

Where I have used some of the common Windows environment variables instead of explicit directory paths. Also, you do not have to name this directory "libraries", that is just a suggestion.

Wherever you choose, create you library directory, and create the 4 subdirectories (bin, doc, include, and lib). 

-- copying the files --

For each library in DEPENDENCIES.txt, copy the .lib files to the lib directory, copy the .dll and .exe files to the bin subdirectory.

For the include files, copy all of the SDL and SDL-related libraries to a "libraries\include\SDL" subdirectory, copy all the PhysicsFS files to "libraries\include\physfs", copy the lua files to "libraries\include\lua", copy the ENet files to "libraries\include\enet." The way that egoboo includes files basically requires these subdirecories so that we don't have to do anything special for linux and mac, which will definitely use this *nix file structure.

You can do whatever you want for the doc files, but if you copy them to "libraries\doc" you will want to use a similar sub-directory structure to what we did for the include files.

-- "installing" the libraries --

For windows and your compiler to recognize these library directories, you will have to add and edit some environmental variables. 

First, open the "System Properties" dialog. Under all recent versions of windows, you can get to this by right clicking on "My Computer" and choosing "Properties" or by going to the control panel and clicking on the "System" icon. Once it is open, go to the "Advanced" tab and click on "Environment Variables."

The egoboo project files need an environment variable called "LibraryInstallDir". You can create this by clicking on the "New" button in the "User Variables" pane. Type "LibraryInstallDir" in the "Variable name" text box, and the name of your directory in the "Variable value" text box, making sure that you add a  trailing "\". For instance if you chose %COMMONPROGRAMFILES%\libraries from above, use "%COMMONPROGRAMFILES%\libraries\" for the variable name (without the quotes, of course).

So that you don't have to copy the .dll files all over the place, we want to add the bin subdirectory the windows search path. This requires that you edit the system envoronment variable "Path". 

	!!!! Make sure that you don't delete anything from Path !!!!

That should be sufficient warning. If you accidentally change something, just click cancel on the dialog box and all of your changes will be discarded.

All you want to do add the following text to the end of the Path variable name:

	";%LibraryInstallDir%\bin"

(without the quotes, of course), and you are done. If you don't have administrative access, you are just going to have to copy all the .dll files to the directory where you run the program.

--- fixing your IDE ---

The one other thing that you have to do is to configure the search directories of your Integrated Development Environment (IDE). As I said before, we are primarily interested in the Microsoft Visual C++ (MSVC) family of IDEs. 

There are two routes for configuring these directories in MSVC. For any version Microsoft Visual C++ before 2010 (version < 10.0), you need to open up the Options dialog and go to the "VC++ Directories" property page (probably Tools->Options...->Projects->VC++ Directories). There will be an editable list of directories and a drop-down selector labaled "Show directories for" that lets you choose which search paths you want to modify. You want to add the following entries at the bottom of the list:

	- in "Executable files" add "$(LibraryInstallDir)bin"
	- in "Include files" add "$(LibraryInstallDir)include"
	- in "Library files" add "$(LibraryInstallDir)lib"

This will allow your compiler to find all of your library files. The setting is the same for all MSVC projects on that IDE, so is you can use the same exact library structure for all your projects and save yourself some headache.

For Visual C++ before 2010 (and probably above), you modify the settings in the project property sheet by using .props files. These have been included along with the .vcproj files. They can be edited inside the IDE using the Property Manager, or edited using an external text editor (if you are crazy). The .props files distributed with egoboo already use LibraryInstallDir, so as long as that directory is defined, there is nothing more to do. 

For Code::Blocks, you have to go in and edit the project configuration. Go to the build targets property sheet, which you can get to from the "Project->Build options..." or by right clicking on the project and choosing "Properties...", choosing the "Build targets" tab, selecting a project, and clicking on "Build options..."

Click over to the "Search Directories" tab and you can specify the search path for the compiler and linker. For the compiler, you should add "%LibraryInstallDir%include" and for the linker, you should add "%LibraryInstallDir%lib".

COMPILING EGOBOO (YAY!)
=======================

(needs to be updated 21-08-2011)

Here are the seps you can take in you MSVC IDE to actually compile egoboo. Sorry that I (Birdsey) did not revise the docs further than this, but without the stuff above everyone gets hopelessly lost! LOL


Step 1:
-------

The Egoboo project file is in the source code folder that you downloaded from the game website or the SVN repository. It is the .sln file. Open version 9 for studio 2008 and version 8 for 2005 (Version 7 is for older ones). Open it up with Visual C++ 2005/2008. If everything goes right, all of the needed compile settings should be set for you Razz, but we are checking it, just to make sure. Now, you will see two folders on the left side called "enet" and "game". Right click "game". Go to "Linker" (Click the + button) and  elect Input. Go to Additional dependencies, double click it. A button like this: ... will appear on the right side, click it. 

You should have it like this:

	SDLmain.lib
	SDL.lib
	SDL_ttf.lib
	SDL_mixer.lib
	SDL_image.lib
	enet.lib
	physfs.lib
	opengl32.lib
	glu32.lib
	shlwapi.lib
	ws2_32.lib
	SHFolder.lib
	Shell32.lib
	Winmm.lib

for the lua integration, you need the lua 5.0 or better libraries. (The Lua libraries come in static and dynamic versions. To use the static libraries, copy the static versions of the libraries to %LibraryInstallDir%lib. To use the .dll versions, just copy the normal lua libraries to that dir and copy the lua5.1.dll to the %LibraryInstallDir%bin directory.)

lua5.1.lib
lualib5.1.lib

Once you made sure that these match, you can continue. (Note: they don't have to be exactly the same, but this is how I recommend you to have it). If the system did not find a library or expects a different filename, it will alert you.

Step 2:
-------

Go to build -> build solution and there you go! Note: just remember about switching between debug mode and release mode (Batch build or debug build).

If you got any problems, don't hesitate to ask for help in the help section of the forums.

Good luck!
